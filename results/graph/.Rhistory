else{
columns <- c(columns,rnpd_col,vol_col,msr_col,rnfwd_col,rwfwd_col,rw_col)
dt.emi[[rnfwd_col]] <-  (dt.emi[[rnpd_col]] - dt.emi[[rnpd_col_prev]])/(1-dt.emi[[rnpd_col_prev]])
##QUESTE RIGHE COMMENTATE SONO NEL CASO IN CUI SI VUOLE CALCOLARE L'ULTIMA VOLATILITà (QUANDO C'è SS CORTA) E SETTARLA SU TUTTO IL DT
#vol <- runSD(pmax(-(lag(dt.emi[[rnfwd_col]], n = 1, default = 0) - dt.emi[[rnfwd_col]]), 0)[2:vol_day],vol_day-1)
#vol <- vol[!is.na(vol)]
#dt.emi[[vol_col]] <- vol
dt.emi[[vol_col]] <- runSD(pmax(-(lag(dt.emi[[rnfwd_col]], n = 1, default = 0) - dt.emi[[rnfwd_col]]), 0),vol_day)
dt.emi[[msr_col]] <- as.double(par[tenor == i,'a']) * exp(dt.emi$lowerBound* as.double(par[tenor == i,'b']))+ as.double(par[tenor == i,'c'])* dt.emi[[vol_col]]^as.double(par[tenor == i,'d']) - as.double(par[tenor == i,'e'])*sqrt(dt.emi$lowerBound *dt.emi[[vol_col]])
dt.emi[[rwfwd_col]] <- pnorm(qnorm(dt.emi[[rnfwd_col]]) - dt.emi[[msr_col]] * dt.emi$correlazione)
dt.emi[[rw_col]] <- dt.emi[[rw_col_prev]] + (1-dt.emi[[rw_col_prev]])*dt.emi[[rwfwd_col]]
}
dt_new <- data.table(dt.emi[,'data'],dt.emi[,'rwpd_id'],tenor = as.character(i) , tenor_type =NA, valore = as.double(unlist(dt.emi[[rw_col]])) ,data_elaborazione = NA, Note= NA)
dt_new[,data := as.character(data)]
dt <- rbind(dt, dt_new)
}
dt.emi<- setcolorder(dt.emi[complete.cases(dt.emi),],columns)
dt <- dt[!is.na(valore) & data >= data_start_write,]
if (WRITE == TRUE){
sqldel <- dbGetQuery(conn,sprintf("delete rrm_kr..k2_realworldpd_seriestoriche_v2 where rwpd_id = %s and data >='%s' and data <='%s'",rwpd_id, data_start_write, data_end))
dbWriteTable(conn,  "k2_realworldpd_seriestoriche_v2", setDF(dt), append = T)
sqldel <-dbGetQuery(conn,sprintf("delete k2_RealWorldPD_v2_InputCalcolo where rwpd_id = %s and data >='%s' and data <='%s'",rwpd_id, as.character(dt.emi[1,'data'][[1]]),as.character(dt.emi[nrow(dt.emi),'data'][[1]])))
dbWriteTable(conn,  "k2_RealWorldPD_v2_InputCalcolo", setDF(dt.emi), append = T)
}
},
error=function(cond){
message(paste("Rwpd failed:", rwpd_id))
}
)
}
#write.table(dt.emi,"C:\\Users\\amorettia\\Desktop\\Documento1.txt")
print("The End")
rm(list = ls())
library(DBI)
#library(RODBC)
#library(ROCR)
library(odbc)
library(RODBCext)
library(stringr)
library(gridExtra)
library(dplyr)
library(tidyr)
library(TTR)
library(ggplot2)
library(reshape)
library(data.table)
#setwd("C:/LibreriaR_true")
#source("Utility/varie.R")
conn <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQL Server};Server=HAL9000;Database=RRM_KR;UID=alm;PWD=alm")
data_start <- "2019-03-01"
data_end <- "2020-02-28"
data_start_write <- "2020-02-26"
# msr_id <-9  #9 E 10 EUROPA, 11 USA
#
# if(msr_id == 9| msr_id == 10){
#   msr_modalita_id <- 8 #8 SE EUROPA
# }else if (msr_id == 11){
#   msr_modalita_id <- 9 #9 SE USA
# }
#dataframe_perimetro <- dbGetQuery(conn, sprintf( "select * from RRM_KR..k2_RealWorldPd_Anagrafica where fare = 1 and id in ('6') and msr_id =  %s",msr_id))
maxtenor <- 10
WRITE <- TRUE
dataframe_perimetro <- dbGetQuery(conn,"select * from RRM_KR..k2_RealWorldPd_Anagrafica where fare = 1 and msr_id in (9,10,11)and id = 1053")
MSR_anag <- data.table(dbGetQuery(conn,"select * from rrm_kr..k2_MarketSharpeRatio_anagrafica"))
calib_parameters <- data.table(dbGetQuery(conn,"select msr_modalita_id, tenor,	p1 as a,	p2 as b,	p3 as c,	p4	as d, p5 as e
from rrm_kr.[alm].[k2_MarketSharpeRatio_Modalita_ParametriCalibrazione]"))
for (row in 1:nrow(dataframe_perimetro)){
columns <- c("data", "rwpd_id", "correlazione", "lowerBound")
tryCatch({
rwpd_id <- dataframe_perimetro[row, "id"]
msr_id <- dataframe_perimetro[row, "msr_id"]
msr_mod_id <- MSR_anag[id == msr_id]$msr_modalita_id
par <- calib_parameters[msr_modalita_id == msr_mod_id]
print(rwpd_id)
dbExecute(conn,sprintf("exec rrm_kr..[sp_k2_alimentaEmittente_new] %s, '%s', '%s', %s", rwpd_id, data_start, data_end, maxtenor) )
dt.emi<-data.table(dbGetQuery(conn, sprintf("select * from RRM_KR.[alm].k2_tmp_test order by data")))
vol_day <- min(60,nrow(dt.emi))
dt <-  data.table(data = as.character(),rwpd_id = as.integer(),tenor = as.integer(),tenor_type  = as.character(), valore = as.double(), data_elaborazione=as.character(), Note = as.character())
for (i in 1:maxtenor){
vol_col <- paste('vola',i,sep = '')
rnpd_col <- paste('rn',i,sep = '')
rnpd_col_prev <- paste('rn',i-1,sep = '')
msr_col <- paste('msr',i,sep = '')
rnfwd_col <- paste('rn_fwd',i,sep = '')
rwfwd_col <- paste('rw_fwd',i,sep = '')
rw_col <- paste('rw',i,sep = '')
rw_col_prev <- paste('rw',i-1,sep = '')
if(i==1){
columns <- c(columns,rnpd_col,vol_col,msr_col,rw_col)
##QUESTE RIGHE COMMENTATE SONO NEL CASO IN CUI SI VUOLE CALCOLARE L'ULTIMA VOLATILITà (QUANDO C'è SS CORTA) E SETTARLA SU TUTTO IL DT
#vol <- runSD(pmax(-(lag(dt.emi[[rnpd_col]], n = 1, default = 0) - dt.emi[[rnpd_col]]), 0)[2:vol_day],vol_day-1)
#vol <- vol[!is.na(vol)]
#dt.emi[[vol_col]] <- vol
dt.emi[[vol_col]] <-  runSD(pmax(-(lag(dt.emi[[rnpd_col]], n = 1, default = 0) - dt.emi[[rnpd_col]]), 0),vol_day)
dt.emi[[msr_col]] <- as.double(par[tenor == i,'a']) * exp(dt.emi$lowerBound* as.double(par[tenor == i,'b']))+ as.double(par[tenor == i,'c'])* dt.emi[[vol_col]]^as.double(par[tenor == i,'d']) - as.double(par[tenor == i,'e'])*sqrt(dt.emi$lowerBound *dt.emi[[vol_col]])
dt.emi[[rw_col]]<- pnorm(qnorm(dt.emi[[rnpd_col]]) - dt.emi[[msr_col]] * dt.emi$correlazione)
}
else{
columns <- c(columns,rnpd_col,vol_col,msr_col,rnfwd_col,rwfwd_col,rw_col)
dt.emi[[rnfwd_col]] <-  (dt.emi[[rnpd_col]] - dt.emi[[rnpd_col_prev]])/(1-dt.emi[[rnpd_col_prev]])
##QUESTE RIGHE COMMENTATE SONO NEL CASO IN CUI SI VUOLE CALCOLARE L'ULTIMA VOLATILITà (QUANDO C'è SS CORTA) E SETTARLA SU TUTTO IL DT
#vol <- runSD(pmax(-(lag(dt.emi[[rnfwd_col]], n = 1, default = 0) - dt.emi[[rnfwd_col]]), 0)[2:vol_day],vol_day-1)
#vol <- vol[!is.na(vol)]
#dt.emi[[vol_col]] <- vol
dt.emi[[vol_col]] <- runSD(pmax(-(lag(dt.emi[[rnfwd_col]], n = 1, default = 0) - dt.emi[[rnfwd_col]]), 0),vol_day)
dt.emi[[msr_col]] <- as.double(par[tenor == i,'a']) * exp(dt.emi$lowerBound* as.double(par[tenor == i,'b']))+ as.double(par[tenor == i,'c'])* dt.emi[[vol_col]]^as.double(par[tenor == i,'d']) - as.double(par[tenor == i,'e'])*sqrt(dt.emi$lowerBound *dt.emi[[vol_col]])
dt.emi[[rwfwd_col]] <- pnorm(qnorm(dt.emi[[rnfwd_col]]) - dt.emi[[msr_col]] * dt.emi$correlazione)
dt.emi[[rw_col]] <- dt.emi[[rw_col_prev]] + (1-dt.emi[[rw_col_prev]])*dt.emi[[rwfwd_col]]
}
dt_new <- data.table(dt.emi[,'data'],dt.emi[,'rwpd_id'],tenor = as.character(i) , tenor_type =NA, valore = as.double(unlist(dt.emi[[rw_col]])) ,data_elaborazione = NA, Note= NA)
dt_new[,data := as.character(data)]
dt <- rbind(dt, dt_new)
}
dt.emi<- setcolorder(dt.emi[complete.cases(dt.emi),],columns)
dt <- dt[!is.na(valore) & data >= data_start_write,]
if (WRITE == TRUE){
sqldel <- dbGetQuery(conn,sprintf("delete rrm_kr..k2_realworldpd_seriestoriche_v2 where rwpd_id = %s and data >='%s' and data <='%s'",rwpd_id, data_start_write, data_end))
dbWriteTable(conn,  "k2_realworldpd_seriestoriche_v2", setDF(dt), append = T)
sqldel <-dbGetQuery(conn,sprintf("delete k2_RealWorldPD_v2_InputCalcolo where rwpd_id = %s and data >='%s' and data <='%s'",rwpd_id, as.character(dt.emi[1,'data'][[1]]),as.character(dt.emi[nrow(dt.emi),'data'][[1]])))
dbWriteTable(conn,  "k2_RealWorldPD_v2_InputCalcolo", setDF(dt.emi), append = T)
}
},
error=function(cond){
message(paste("Rwpd failed:", rwpd_id))
}
)
}
#write.table(dt.emi,"C:\\Users\\amorettia\\Desktop\\Documento1.txt")
print("The End")
rm(list = ls())
library(DBI)
#library(RODBC)
#library(ROCR)
library(odbc)
library(RODBCext)
library(stringr)
library(gridExtra)
library(dplyr)
library(tidyr)
library(TTR)
library(ggplot2)
library(reshape)
library(data.table)
#setwd("C:/LibreriaR_true")
#source("Utility/varie.R")
conn <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQL Server};Server=HAL9000;Database=RRM_KR;UID=alm;PWD=alm")
data_start <- "2019-03-01"
data_end <- "2020-02-28"
data_start_write <- "2020-02-26"
# msr_id <-9  #9 E 10 EUROPA, 11 USA
#
# if(msr_id == 9| msr_id == 10){
#   msr_modalita_id <- 8 #8 SE EUROPA
# }else if (msr_id == 11){
#   msr_modalita_id <- 9 #9 SE USA
# }
#dataframe_perimetro <- dbGetQuery(conn, sprintf( "select * from RRM_KR..k2_RealWorldPd_Anagrafica where fare = 1 and id in ('6') and msr_id =  %s",msr_id))
maxtenor <- 10
WRITE <- TRUE
dataframe_perimetro <- dbGetQuery(conn,"select * from RRM_KR..k2_RealWorldPd_Anagrafica where fare = 1 and msr_id in (9,10,11)and id = 640")
MSR_anag <- data.table(dbGetQuery(conn,"select * from rrm_kr..k2_MarketSharpeRatio_anagrafica"))
calib_parameters <- data.table(dbGetQuery(conn,"select msr_modalita_id, tenor,	p1 as a,	p2 as b,	p3 as c,	p4	as d, p5 as e
from rrm_kr.[alm].[k2_MarketSharpeRatio_Modalita_ParametriCalibrazione]"))
for (row in 1:nrow(dataframe_perimetro)){
columns <- c("data", "rwpd_id", "correlazione", "lowerBound")
tryCatch({
rwpd_id <- dataframe_perimetro[row, "id"]
msr_id <- dataframe_perimetro[row, "msr_id"]
msr_mod_id <- MSR_anag[id == msr_id]$msr_modalita_id
par <- calib_parameters[msr_modalita_id == msr_mod_id]
print(rwpd_id)
dbExecute(conn,sprintf("exec rrm_kr..[sp_k2_alimentaEmittente_new] %s, '%s', '%s', %s", rwpd_id, data_start, data_end, maxtenor) )
dt.emi<-data.table(dbGetQuery(conn, sprintf("select * from RRM_KR.[alm].k2_tmp_test order by data")))
vol_day <- min(60,nrow(dt.emi))
dt <-  data.table(data = as.character(),rwpd_id = as.integer(),tenor = as.integer(),tenor_type  = as.character(), valore = as.double(), data_elaborazione=as.character(), Note = as.character())
for (i in 1:maxtenor){
vol_col <- paste('vola',i,sep = '')
rnpd_col <- paste('rn',i,sep = '')
rnpd_col_prev <- paste('rn',i-1,sep = '')
msr_col <- paste('msr',i,sep = '')
rnfwd_col <- paste('rn_fwd',i,sep = '')
rwfwd_col <- paste('rw_fwd',i,sep = '')
rw_col <- paste('rw',i,sep = '')
rw_col_prev <- paste('rw',i-1,sep = '')
if(i==1){
columns <- c(columns,rnpd_col,vol_col,msr_col,rw_col)
##QUESTE RIGHE COMMENTATE SONO NEL CASO IN CUI SI VUOLE CALCOLARE L'ULTIMA VOLATILITà (QUANDO C'è SS CORTA) E SETTARLA SU TUTTO IL DT
#vol <- runSD(pmax(-(lag(dt.emi[[rnpd_col]], n = 1, default = 0) - dt.emi[[rnpd_col]]), 0)[2:vol_day],vol_day-1)
#vol <- vol[!is.na(vol)]
#dt.emi[[vol_col]] <- vol
dt.emi[[vol_col]] <-  runSD(pmax(-(lag(dt.emi[[rnpd_col]], n = 1, default = 0) - dt.emi[[rnpd_col]]), 0),vol_day)
dt.emi[[msr_col]] <- as.double(par[tenor == i,'a']) * exp(dt.emi$lowerBound* as.double(par[tenor == i,'b']))+ as.double(par[tenor == i,'c'])* dt.emi[[vol_col]]^as.double(par[tenor == i,'d']) - as.double(par[tenor == i,'e'])*sqrt(dt.emi$lowerBound *dt.emi[[vol_col]])
dt.emi[[rw_col]]<- pnorm(qnorm(dt.emi[[rnpd_col]]) - dt.emi[[msr_col]] * dt.emi$correlazione)
}
else{
columns <- c(columns,rnpd_col,vol_col,msr_col,rnfwd_col,rwfwd_col,rw_col)
dt.emi[[rnfwd_col]] <-  (dt.emi[[rnpd_col]] - dt.emi[[rnpd_col_prev]])/(1-dt.emi[[rnpd_col_prev]])
##QUESTE RIGHE COMMENTATE SONO NEL CASO IN CUI SI VUOLE CALCOLARE L'ULTIMA VOLATILITà (QUANDO C'è SS CORTA) E SETTARLA SU TUTTO IL DT
#vol <- runSD(pmax(-(lag(dt.emi[[rnfwd_col]], n = 1, default = 0) - dt.emi[[rnfwd_col]]), 0)[2:vol_day],vol_day-1)
#vol <- vol[!is.na(vol)]
#dt.emi[[vol_col]] <- vol
dt.emi[[vol_col]] <- runSD(pmax(-(lag(dt.emi[[rnfwd_col]], n = 1, default = 0) - dt.emi[[rnfwd_col]]), 0),vol_day)
dt.emi[[msr_col]] <- as.double(par[tenor == i,'a']) * exp(dt.emi$lowerBound* as.double(par[tenor == i,'b']))+ as.double(par[tenor == i,'c'])* dt.emi[[vol_col]]^as.double(par[tenor == i,'d']) - as.double(par[tenor == i,'e'])*sqrt(dt.emi$lowerBound *dt.emi[[vol_col]])
dt.emi[[rwfwd_col]] <- pnorm(qnorm(dt.emi[[rnfwd_col]]) - dt.emi[[msr_col]] * dt.emi$correlazione)
dt.emi[[rw_col]] <- dt.emi[[rw_col_prev]] + (1-dt.emi[[rw_col_prev]])*dt.emi[[rwfwd_col]]
}
dt_new <- data.table(dt.emi[,'data'],dt.emi[,'rwpd_id'],tenor = as.character(i) , tenor_type =NA, valore = as.double(unlist(dt.emi[[rw_col]])) ,data_elaborazione = NA, Note= NA)
dt_new[,data := as.character(data)]
dt <- rbind(dt, dt_new)
}
dt.emi<- setcolorder(dt.emi[complete.cases(dt.emi),],columns)
dt <- dt[!is.na(valore) & data >= data_start_write,]
if (WRITE == TRUE){
sqldel <- dbGetQuery(conn,sprintf("delete rrm_kr..k2_realworldpd_seriestoriche_v2 where rwpd_id = %s and data >='%s' and data <='%s'",rwpd_id, data_start_write, data_end))
dbWriteTable(conn,  "k2_realworldpd_seriestoriche_v2", setDF(dt), append = T)
sqldel <-dbGetQuery(conn,sprintf("delete k2_RealWorldPD_v2_InputCalcolo where rwpd_id = %s and data >='%s' and data <='%s'",rwpd_id, as.character(dt.emi[1,'data'][[1]]),as.character(dt.emi[nrow(dt.emi),'data'][[1]])))
dbWriteTable(conn,  "k2_RealWorldPD_v2_InputCalcolo", setDF(dt.emi), append = T)
}
},
error=function(cond){
message(paste("Rwpd failed:", rwpd_id))
}
)
}
#write.table(dt.emi,"C:\\Users\\amorettia\\Desktop\\Documento1.txt")
print("The End")
rm(list = ls())
library(DBI)
#library(RODBC)
#library(ROCR)
library(odbc)
library(RODBCext)
library(stringr)
library(gridExtra)
library(dplyr)
library(tidyr)
library(TTR)
library(ggplot2)
library(reshape)
library(data.table)
#setwd("C:/LibreriaR_true")
#source("Utility/varie.R")
conn <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQL Server};Server=HAL9000;Database=RRM_KR;UID=alm;PWD=alm")
data_start <- "2019-03-01"
data_end <- "2020-02-28"
data_start_write <- "2020-02-26"
# msr_id <-9  #9 E 10 EUROPA, 11 USA
#
# if(msr_id == 9| msr_id == 10){
#   msr_modalita_id <- 8 #8 SE EUROPA
# }else if (msr_id == 11){
#   msr_modalita_id <- 9 #9 SE USA
# }
#dataframe_perimetro <- dbGetQuery(conn, sprintf( "select * from RRM_KR..k2_RealWorldPd_Anagrafica where fare = 1 and id in ('6') and msr_id =  %s",msr_id))
maxtenor <- 10
WRITE <- TRUE
dataframe_perimetro <- dbGetQuery(conn,"select * from RRM_KR..k2_RealWorldPd_Anagrafica where fare = 1 and msr_id in (9,10,11)and id = 652")
MSR_anag <- data.table(dbGetQuery(conn,"select * from rrm_kr..k2_MarketSharpeRatio_anagrafica"))
calib_parameters <- data.table(dbGetQuery(conn,"select msr_modalita_id, tenor,	p1 as a,	p2 as b,	p3 as c,	p4	as d, p5 as e
from rrm_kr.[alm].[k2_MarketSharpeRatio_Modalita_ParametriCalibrazione]"))
for (row in 1:nrow(dataframe_perimetro)){
columns <- c("data", "rwpd_id", "correlazione", "lowerBound")
tryCatch({
rwpd_id <- dataframe_perimetro[row, "id"]
msr_id <- dataframe_perimetro[row, "msr_id"]
msr_mod_id <- MSR_anag[id == msr_id]$msr_modalita_id
par <- calib_parameters[msr_modalita_id == msr_mod_id]
print(rwpd_id)
dbExecute(conn,sprintf("exec rrm_kr..[sp_k2_alimentaEmittente_new] %s, '%s', '%s', %s", rwpd_id, data_start, data_end, maxtenor) )
dt.emi<-data.table(dbGetQuery(conn, sprintf("select * from RRM_KR.[alm].k2_tmp_test order by data")))
vol_day <- min(60,nrow(dt.emi))
dt <-  data.table(data = as.character(),rwpd_id = as.integer(),tenor = as.integer(),tenor_type  = as.character(), valore = as.double(), data_elaborazione=as.character(), Note = as.character())
for (i in 1:maxtenor){
vol_col <- paste('vola',i,sep = '')
rnpd_col <- paste('rn',i,sep = '')
rnpd_col_prev <- paste('rn',i-1,sep = '')
msr_col <- paste('msr',i,sep = '')
rnfwd_col <- paste('rn_fwd',i,sep = '')
rwfwd_col <- paste('rw_fwd',i,sep = '')
rw_col <- paste('rw',i,sep = '')
rw_col_prev <- paste('rw',i-1,sep = '')
if(i==1){
columns <- c(columns,rnpd_col,vol_col,msr_col,rw_col)
##QUESTE RIGHE COMMENTATE SONO NEL CASO IN CUI SI VUOLE CALCOLARE L'ULTIMA VOLATILITà (QUANDO C'è SS CORTA) E SETTARLA SU TUTTO IL DT
#vol <- runSD(pmax(-(lag(dt.emi[[rnpd_col]], n = 1, default = 0) - dt.emi[[rnpd_col]]), 0)[2:vol_day],vol_day-1)
#vol <- vol[!is.na(vol)]
#dt.emi[[vol_col]] <- vol
dt.emi[[vol_col]] <-  runSD(pmax(-(lag(dt.emi[[rnpd_col]], n = 1, default = 0) - dt.emi[[rnpd_col]]), 0),vol_day)
dt.emi[[msr_col]] <- as.double(par[tenor == i,'a']) * exp(dt.emi$lowerBound* as.double(par[tenor == i,'b']))+ as.double(par[tenor == i,'c'])* dt.emi[[vol_col]]^as.double(par[tenor == i,'d']) - as.double(par[tenor == i,'e'])*sqrt(dt.emi$lowerBound *dt.emi[[vol_col]])
dt.emi[[rw_col]]<- pnorm(qnorm(dt.emi[[rnpd_col]]) - dt.emi[[msr_col]] * dt.emi$correlazione)
}
else{
columns <- c(columns,rnpd_col,vol_col,msr_col,rnfwd_col,rwfwd_col,rw_col)
dt.emi[[rnfwd_col]] <-  (dt.emi[[rnpd_col]] - dt.emi[[rnpd_col_prev]])/(1-dt.emi[[rnpd_col_prev]])
##QUESTE RIGHE COMMENTATE SONO NEL CASO IN CUI SI VUOLE CALCOLARE L'ULTIMA VOLATILITà (QUANDO C'è SS CORTA) E SETTARLA SU TUTTO IL DT
#vol <- runSD(pmax(-(lag(dt.emi[[rnfwd_col]], n = 1, default = 0) - dt.emi[[rnfwd_col]]), 0)[2:vol_day],vol_day-1)
#vol <- vol[!is.na(vol)]
#dt.emi[[vol_col]] <- vol
dt.emi[[vol_col]] <- runSD(pmax(-(lag(dt.emi[[rnfwd_col]], n = 1, default = 0) - dt.emi[[rnfwd_col]]), 0),vol_day)
dt.emi[[msr_col]] <- as.double(par[tenor == i,'a']) * exp(dt.emi$lowerBound* as.double(par[tenor == i,'b']))+ as.double(par[tenor == i,'c'])* dt.emi[[vol_col]]^as.double(par[tenor == i,'d']) - as.double(par[tenor == i,'e'])*sqrt(dt.emi$lowerBound *dt.emi[[vol_col]])
dt.emi[[rwfwd_col]] <- pnorm(qnorm(dt.emi[[rnfwd_col]]) - dt.emi[[msr_col]] * dt.emi$correlazione)
dt.emi[[rw_col]] <- dt.emi[[rw_col_prev]] + (1-dt.emi[[rw_col_prev]])*dt.emi[[rwfwd_col]]
}
dt_new <- data.table(dt.emi[,'data'],dt.emi[,'rwpd_id'],tenor = as.character(i) , tenor_type =NA, valore = as.double(unlist(dt.emi[[rw_col]])) ,data_elaborazione = NA, Note= NA)
dt_new[,data := as.character(data)]
dt <- rbind(dt, dt_new)
}
dt.emi<- setcolorder(dt.emi[complete.cases(dt.emi),],columns)
dt <- dt[!is.na(valore) & data >= data_start_write,]
if (WRITE == TRUE){
sqldel <- dbGetQuery(conn,sprintf("delete rrm_kr..k2_realworldpd_seriestoriche_v2 where rwpd_id = %s and data >='%s' and data <='%s'",rwpd_id, data_start_write, data_end))
dbWriteTable(conn,  "k2_realworldpd_seriestoriche_v2", setDF(dt), append = T)
sqldel <-dbGetQuery(conn,sprintf("delete k2_RealWorldPD_v2_InputCalcolo where rwpd_id = %s and data >='%s' and data <='%s'",rwpd_id, as.character(dt.emi[1,'data'][[1]]),as.character(dt.emi[nrow(dt.emi),'data'][[1]])))
dbWriteTable(conn,  "k2_RealWorldPD_v2_InputCalcolo", setDF(dt.emi), append = T)
}
},
error=function(cond){
message(paste("Rwpd failed:", rwpd_id))
}
)
}
#write.table(dt.emi,"C:\\Users\\amorettia\\Desktop\\Documento1.txt")
print("The End")
rm(list = ls())
library(DBI)
#library(RODBC)
#library(ROCR)
library(odbc)
library(RODBCext)
library(stringr)
library(gridExtra)
library(dplyr)
library(tidyr)
library(TTR)
library(ggplot2)
library(reshape)
library(data.table)
#setwd("C:/LibreriaR_true")
#source("Utility/varie.R")
conn <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQL Server};Server=HAL9000;Database=RRM_KR;UID=alm;PWD=alm")
data_start <- "2019-03-01"
data_end <- "2020-02-28"
data_start_write <- "2020-02-26"
# msr_id <-9  #9 E 10 EUROPA, 11 USA
#
# if(msr_id == 9| msr_id == 10){
#   msr_modalita_id <- 8 #8 SE EUROPA
# }else if (msr_id == 11){
#   msr_modalita_id <- 9 #9 SE USA
# }
#dataframe_perimetro <- dbGetQuery(conn, sprintf( "select * from RRM_KR..k2_RealWorldPd_Anagrafica where fare = 1 and id in ('6') and msr_id =  %s",msr_id))
maxtenor <- 10
WRITE <- TRUE
dataframe_perimetro <- dbGetQuery(conn,"select * from RRM_KR..k2_RealWorldPd_Anagrafica where fare = 1 and msr_id in (9,10,11)and id = 167")
MSR_anag <- data.table(dbGetQuery(conn,"select * from rrm_kr..k2_MarketSharpeRatio_anagrafica"))
calib_parameters <- data.table(dbGetQuery(conn,"select msr_modalita_id, tenor,	p1 as a,	p2 as b,	p3 as c,	p4	as d, p5 as e
from rrm_kr.[alm].[k2_MarketSharpeRatio_Modalita_ParametriCalibrazione]"))
for (row in 1:nrow(dataframe_perimetro)){
columns <- c("data", "rwpd_id", "correlazione", "lowerBound")
tryCatch({
rwpd_id <- dataframe_perimetro[row, "id"]
msr_id <- dataframe_perimetro[row, "msr_id"]
msr_mod_id <- MSR_anag[id == msr_id]$msr_modalita_id
par <- calib_parameters[msr_modalita_id == msr_mod_id]
print(rwpd_id)
dbExecute(conn,sprintf("exec rrm_kr..[sp_k2_alimentaEmittente_new] %s, '%s', '%s', %s", rwpd_id, data_start, data_end, maxtenor) )
dt.emi<-data.table(dbGetQuery(conn, sprintf("select * from RRM_KR.[alm].k2_tmp_test order by data")))
vol_day <- min(60,nrow(dt.emi))
dt <-  data.table(data = as.character(),rwpd_id = as.integer(),tenor = as.integer(),tenor_type  = as.character(), valore = as.double(), data_elaborazione=as.character(), Note = as.character())
for (i in 1:maxtenor){
vol_col <- paste('vola',i,sep = '')
rnpd_col <- paste('rn',i,sep = '')
rnpd_col_prev <- paste('rn',i-1,sep = '')
msr_col <- paste('msr',i,sep = '')
rnfwd_col <- paste('rn_fwd',i,sep = '')
rwfwd_col <- paste('rw_fwd',i,sep = '')
rw_col <- paste('rw',i,sep = '')
rw_col_prev <- paste('rw',i-1,sep = '')
if(i==1){
columns <- c(columns,rnpd_col,vol_col,msr_col,rw_col)
##QUESTE RIGHE COMMENTATE SONO NEL CASO IN CUI SI VUOLE CALCOLARE L'ULTIMA VOLATILITà (QUANDO C'è SS CORTA) E SETTARLA SU TUTTO IL DT
#vol <- runSD(pmax(-(lag(dt.emi[[rnpd_col]], n = 1, default = 0) - dt.emi[[rnpd_col]]), 0)[2:vol_day],vol_day-1)
#vol <- vol[!is.na(vol)]
#dt.emi[[vol_col]] <- vol
dt.emi[[vol_col]] <-  runSD(pmax(-(lag(dt.emi[[rnpd_col]], n = 1, default = 0) - dt.emi[[rnpd_col]]), 0),vol_day)
dt.emi[[msr_col]] <- as.double(par[tenor == i,'a']) * exp(dt.emi$lowerBound* as.double(par[tenor == i,'b']))+ as.double(par[tenor == i,'c'])* dt.emi[[vol_col]]^as.double(par[tenor == i,'d']) - as.double(par[tenor == i,'e'])*sqrt(dt.emi$lowerBound *dt.emi[[vol_col]])
dt.emi[[rw_col]]<- pnorm(qnorm(dt.emi[[rnpd_col]]) - dt.emi[[msr_col]] * dt.emi$correlazione)
}
else{
columns <- c(columns,rnpd_col,vol_col,msr_col,rnfwd_col,rwfwd_col,rw_col)
dt.emi[[rnfwd_col]] <-  (dt.emi[[rnpd_col]] - dt.emi[[rnpd_col_prev]])/(1-dt.emi[[rnpd_col_prev]])
##QUESTE RIGHE COMMENTATE SONO NEL CASO IN CUI SI VUOLE CALCOLARE L'ULTIMA VOLATILITà (QUANDO C'è SS CORTA) E SETTARLA SU TUTTO IL DT
#vol <- runSD(pmax(-(lag(dt.emi[[rnfwd_col]], n = 1, default = 0) - dt.emi[[rnfwd_col]]), 0)[2:vol_day],vol_day-1)
#vol <- vol[!is.na(vol)]
#dt.emi[[vol_col]] <- vol
dt.emi[[vol_col]] <- runSD(pmax(-(lag(dt.emi[[rnfwd_col]], n = 1, default = 0) - dt.emi[[rnfwd_col]]), 0),vol_day)
dt.emi[[msr_col]] <- as.double(par[tenor == i,'a']) * exp(dt.emi$lowerBound* as.double(par[tenor == i,'b']))+ as.double(par[tenor == i,'c'])* dt.emi[[vol_col]]^as.double(par[tenor == i,'d']) - as.double(par[tenor == i,'e'])*sqrt(dt.emi$lowerBound *dt.emi[[vol_col]])
dt.emi[[rwfwd_col]] <- pnorm(qnorm(dt.emi[[rnfwd_col]]) - dt.emi[[msr_col]] * dt.emi$correlazione)
dt.emi[[rw_col]] <- dt.emi[[rw_col_prev]] + (1-dt.emi[[rw_col_prev]])*dt.emi[[rwfwd_col]]
}
dt_new <- data.table(dt.emi[,'data'],dt.emi[,'rwpd_id'],tenor = as.character(i) , tenor_type =NA, valore = as.double(unlist(dt.emi[[rw_col]])) ,data_elaborazione = NA, Note= NA)
dt_new[,data := as.character(data)]
dt <- rbind(dt, dt_new)
}
dt.emi<- setcolorder(dt.emi[complete.cases(dt.emi),],columns)
dt <- dt[!is.na(valore) & data >= data_start_write,]
if (WRITE == TRUE){
sqldel <- dbGetQuery(conn,sprintf("delete rrm_kr..k2_realworldpd_seriestoriche_v2 where rwpd_id = %s and data >='%s' and data <='%s'",rwpd_id, data_start_write, data_end))
dbWriteTable(conn,  "k2_realworldpd_seriestoriche_v2", setDF(dt), append = T)
sqldel <-dbGetQuery(conn,sprintf("delete k2_RealWorldPD_v2_InputCalcolo where rwpd_id = %s and data >='%s' and data <='%s'",rwpd_id, as.character(dt.emi[1,'data'][[1]]),as.character(dt.emi[nrow(dt.emi),'data'][[1]])))
dbWriteTable(conn,  "k2_RealWorldPD_v2_InputCalcolo", setDF(dt.emi), append = T)
}
},
error=function(cond){
message(paste("Rwpd failed:", rwpd_id))
}
)
}
#write.table(dt.emi,"C:\\Users\\amorettia\\Desktop\\Documento1.txt")
print("The End")
a <- data.frame(data=data_new,time=time_new,sample)
data <- c("2020-05-01","2017-02-24")
time <- c("12:13:59","02:03:33")
class(data1)
data_new <- ymd(data)
time_new <- hms(time)
sample <- rnorm(2,mean=10)
class(data1_new)
unclass(data1_new)
library(lubridate)
data <- c("2020-05-01","2017-02-24")
time <- c("12:13:59","02:03:33")
class(data1)
data_new <- ymd(data)
time_new <- hms(time)
sample <- rnorm(2,mean=10)
class(data1_new)
unclass(data1_new)
data <- c("2020-05-01","2017-02-24")
time <- c("12:13:59","02:03:33")
class(data1)
data_new <- ymd(data)
time_new <- hms(time)
sample <- rnorm(2,mean=10)
class(data_new)
unclass(data_new)
b <- (data1_new)
data <- c("2020-05-01","2017-02-24")
time <- c("12:13:59","02:03:33")
class(data)
data_new <- ymd(data)
time_new <- hms(time)
sample <- rnorm(2,mean=10)
class(data_new)
unclass(data_new)
b <- (data1_new)
b <- (data_new)
dy<-yearmonthday(data_new)
d
a <- data.frame(data=data_new,time=time_new,sample)
a
a <- data.frame(data=data_new,time=time_new,sample)
a
library(lubridate)
world_death <- read.csv("C:\\Users\\aquilinoa\\Desktop\\COVID-19-ItalyvsWorld\\data\\world\\history\\time_series_19-covid-Deaths.csv")
world_confirmed <- read.csv("C:\\Users\\aquilinoa\\Desktop\\COVID-19-ItalyvsWorld\\data\\world\\history\\time_series_19-covid-Confirmed.csv")
world_recovered <- read.csv("C:\\Users\\aquilinoa\\Desktop\\COVID-19-ItalyvsWorld\\data\\world\\history\\time_series_19-covid-Recovered.csv")
province <- world_death[,1]
country <- world_death[,2]
#droppo le prime 4 colonne
world_death[,c(1:4)]<-NULL
world_confirmed[,c(1:4)]<-NULL
world_recovered[,c(1:4)]<-NULL
#prendo le date del file
days <-  colnames(world_death)
days <- gsub("X",0,days)
days <- as.Date(days,format="%m.%d.%y")
#creo le prime 3 colonne della new_table
datario <- sort(rep(days,nrow(world_death)))
countries <- rep(country,interval(min(days),max(days)+1)/days(1))
provinces <- rep(province,interval(min(days),max(days)+1)/days(1))
death<-c()
confirmed <- c()
recovered <- c()
for (i in 1:length(world_death)){
death[i] <- list(world_death[,i])
confirmed[i] <- list(world_confirmed[,i])
recovered[i] <- list(world_recovered[,i])
}
#creo le colonne con le osservazioni
death <- unlist(death)
confirmed<-unlist(confirmed)
recovered<-unlist(recovered)
#tabella finale
new_table <- data.frame(datario,countries,provinces,death,confirmed,recovered)
library(data.table)
library(ggplot2)
#creo il data table
new_table <- setDT(new_table)
italy <- new_table[countries == "Italy"]
#scalo i confirmed per 10
italy <- cbind(italy[,1],italy[,4],italy[,5]/10,italy[,6])#preparo il dataset per ggplot
italy <-melt(italy,"datario")
#plot con asse secondario *
setwd("C:\\Users\\aquilinoa\\Desktop\\COVID-19-ItalyvsWorld\\results\\graph")
file_name <- paste("Italy_",format(today()-1, "%Y-%m-%d"), ".pdf", sep = "")
pdf(file_name,height=4,paper='special')
plot_italy<-ggplot(italy,aes(datario,value,color=variable,group=variable))+geom_line()+ggtitle("Covid 19 Italy")
plot_italy <- plot_italy + scale_y_continuous("death - recovered", sec.axis = sec_axis(~.*10, name="confirmed"))
#salvo il grafico in un pdfn
plot_italy
dev.off()
